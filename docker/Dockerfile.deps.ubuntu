#########################################################################################
##  Stage 1: build DALI dependencies
##     DALI is based on "manylinux3", which is our modification of manylinux1
##     (CentOS 5 derivative). For building this docker image, manylinux3 has to
##     be manually built. It is also possible to use other distros, but we don't
##     officially support them.
##     For instructions, how to build manylinux3 with our patch see:
##     //DALI/docker/build.sh#L16
#########################################################################################
#FROM nvcr.io/nvidia/cuda:10.1-devel-ubuntu18.04
#FROM gitlab-master.nvidia.com:5005/dl/dgx/cuda:10.1-devel-ubuntu18.04--master
FROM nvcr.io/nvidia/cuda:10.2-devel-ubuntu18.04

SHELL ["/bin/bash", "-c"]

# Install yum Dependencies
RUN apt update && \
    apt install --assume-yes curl perl libxml2 && \
    apt install --assume-yes zip curl wget yasm doxygen graphviz zlib1g-dev && \
    apt install --assume-yes build-essential pkg-config libtool-bin autoconf gcc g++ && \
    apt install --assume-yes git libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev && \
    apt install --assume-yes libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev libffi-dev uuid-dev && \
    apt install --assume-yes libnl-route-3-200 libpmi2-0-dev openssh-client libnuma1 gettext

# MOFED
RUN rm -rf /var/lib/apt/lists/* && \
    wget -qO - https://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox | apt-key add - && \
    mkdir -p /etc/apt/sources.list.d && \
    wget -q -nc --no-check-certificate -P /etc/apt/sources.list.d https://linux.mellanox.com/public/repo/mlnx_ofed/5.0-2.1.8.0/ubuntu18.04/mellanox_mlnx_ofed.list && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ibverbs-providers ibverbs-utils libibmad-dev libibmad5 libibumad-dev \
                                                                              libibumad3 libibverbs-dev libibverbs1 librdmacm-dev librdmacm1 && \
    rm -rf /var/lib/apt/lists/*

# MPI
# Install OpenMPI w/ IBVerbs support.  Builds *without* CUDA-aware MPI features on purpose as
# DLFW don't use those features and it adds overhead for checking every pointer's location in MPI
ARG OPENMPI_VERSION=4.0.3
ENV OPENMPI_VERSION=${OPENMPI_VERSION}
RUN wget -q -O - https://www.open-mpi.org/software/ompi/v$(echo "${OPENMPI_VERSION}" | cut -d . -f 1-2)/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \
 && cd openmpi-${OPENMPI_VERSION} \
 && ln -sf /usr/include/slurm-wlm /usr/include/slurm \
 && ./configure --enable-orterun-prefix-by-default --with-verbs \
                --with-pmi --with-pmix=internal \
		--with-cuda=/usr/local/cuda \
                --prefix=/usr/local/mpi --disable-getpwuid \
 && make -j"$(nproc)" install \
 && cd .. && rm -rf openmpi-${OPENMPI_VERSION} \
 && echo "/usr/local/mpi/lib" >> /etc/ld.so.conf.d/openmpi.conf \
 && rm -f /usr/lib/libibverbs.so /usr/lib/libibverbs.a \
 && ldconfig
ENV PATH /usr/local/mpi/bin:$PATH

# Don't want the short-unicode version for Python 2.7
RUN rm -f /opt/python/cp27-cp27m

# Install python from scratch
ARG PYVER
ARG PYV
RUN PYTHON_VERSION=${PYVER} && \
    if [ "${PYTHON_VERSION}" == "3.7" ]; then PYTHON_VERSION=3.7.4; fi && \
    PYTHON_INSTALLDIR=/opt/python/cp${PYV}-cp${PYV}m && \
    mkdir -p /opt/python && \
    wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz && \
    tar -xf Python-${PYTHON_VERSION}.tar.xz && pushd Python-${PYTHON_VERSION} && \
    ./configure --enable-optimizations --prefix=${PYTHON_INSTALLDIR} && \
    make -j 8 && make install && \
    popd && rm -r Python-${PYTHON_VERSION} Python-${PYTHON_VERSION}.tar.xz && \
    cd ${PYTHON_INSTALLDIR}/bin && ln -s pip3 pip && ln -s python3 python
ENV PATH "/opt/python/cp${PYV}-cp${PYV}m/bin:${PATH}"

# Boost
RUN BOOST_VERSION=1.66.0 && \
    cd /usr/local && \
    wget https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//./_}.tar.gz && \
    tar -xzf boost_${BOOST_VERSION//./_}.tar.gz && \
    ln -s ../boost_${BOOST_VERSION//./_}/boost include/boost
     

# CMake
RUN CMAKE_VERSION=3.13 && \
    CMAKE_BUILD=3.13.5 && \
    curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - && \
    cd /cmake-${CMAKE_BUILD} && \
    ./bootstrap --parallel=$(grep ^processor /proc/cpuinfo | wc -l) && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /cmake-${CMAKE_BUILD}

# protobuf v3.11.1
RUN PROTOBUF_VERSION=3.11.1 && \
    curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - && \
    cd /protobuf-${PROTOBUF_VERSION} && \
    ./autogen.sh && \
    ./configure CXXFLAGS="-fPIC" --prefix=/usr/local --disable-shared 2>&1 > /dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 > /dev/null && \
    rm -rf /protobuf-${PROTOBUF_VERSION}

# LMDB
COPY src/DALI/docker/Makefile-lmdb.patch /tmp
RUN LMDB_VERSION=0.9.22 && \
    git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb && \
    cd /lmdb/libraries/liblmdb && \
    patch -p3 < /tmp/Makefile-lmdb.patch && \
    rm -f /tmp/Makefile-lmdb.patch && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /lmdb

# libjpeg-turbo
RUN JPEG_TURBO_VERSION=2.0.2 && \
    curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - && \
    cd libjpeg-turbo-${JPEG_TURBO_VERSION} && \
    cmake -G"Unix Makefiles" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 >/dev/null && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install 2>&1 >/dev/null && \
    rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}

# libtiff
# Note: libtiff should be built with support for zlib. If running this step alone on a custom
#       system, zlib should be installed first
RUN LIBTIFF_VERSION=4.0.10 && \
    cd /tmp && \
    curl -L http://download.osgeo.org/libtiff/tiff-${LIBTIFF_VERSION}.tar.gz | tar -xzf - && \
    cd tiff-${LIBTIFF_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && \
    make install && \
    cd && \
    rm -rf /tmp/tiff-${LIBTIFF_VERSION}

# OpenCV
RUN OPENCV_VERSION=3.4.3 && \
    curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - && \
    cd /opencv-${OPENCV_VERSION} && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DBUILD_SHARED_LIBS=OFF \
          -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF \
          -DBUILD_JPEG=OFF -DWITH_JPEG=ON \
          -DBUILD_TIFF=OFF -DWITH_TIFF=ON \
          -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON \
          -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF \
          -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" install && \
    rm -rf /opencv-${OPENCV_VERSION}

# Clang
RUN apt update && \
    apt install -y clang

ENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility

# FFmpeg
RUN FFMPEG_VERSION=4.2.2 && \
    cd /tmp && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
    tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    rm ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    cd ffmpeg-$FFMPEG_VERSION && \
    ./configure \
      --prefix=/usr/local \
      --disable-static \
      --disable-all \
      --disable-autodetect \
      --disable-iconv \
      --enable-shared \
      --enable-avformat \
      --enable-avcodec \
      --enable-avfilter \
      --enable-protocol=file \
      --enable-demuxer=mov,matroska,avi  \
      --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb,mpeg4_unpack_bframes && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install && \
    cd /tmp && rm -rf ffmpeg-$FFMPEG_VERSION

# flac
RUN FLAC_VERSION=1.3.3 && cd /tmp                                                    && \
    wget https://github.com/xiph/flac/archive/${FLAC_VERSION}.tar.gz                 && \
    tar -xf ${FLAC_VERSION}.tar.gz                                                   && \
    rm -f  ${FLAC_VERSION}.tar.gz                                                    && \
    cd flac-$FLAC_VERSION                                                            && \
    ./autogen.sh                                                                     && \
    ./configure                                                                      && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                && \
    cd /tmp && rm -rf flac-$FLAC_VERSION

# libogg
RUN OGG_VERSION=1.3.4 && cd /tmp                                                     && \
    wget https://github.com/xiph/ogg/releases/download/v1.3.4/libogg-${OGG_VERSION}.tar.gz && \
    tar -xf libogg-${OGG_VERSION}.tar.gz                                             && \
    rm -f libogg-${OGG_VERSION}.tar.gz                                               && \
    cd libogg-${OGG_VERSION}                                                         && \
    ./configure                                                                      && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                && \
    cd /tmp && rm -rf libogg-$OGG_VERSION

# libvorbis
# Install after libogg
RUN VORBIS_VERSION=1.3.6 && cd /tmp                                                   && \
    wget https://github.com/xiph/vorbis/archive/v${VORBIS_VERSION}.tar.gz             && \
    tar -xf v${VORBIS_VERSION}.tar.gz                                                 && \
    rm -f  v${VORBIS_VERSION}.tar.gz                                                  && \
    cd vorbis-$VORBIS_VERSION                                                         && \
    ./autogen.sh                                                                      && \
    ./configure                                                                       && \
    make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                 && \
    cd /tmp && rm -rf libvorbis-$VORBIS_VERSION

# libsnd
RUN LIBSND_VERSION=1.0.28 && cd /tmp                                                                           && \
    wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/libsndfile-${LIBSND_VERSION}.tar.gz  && \
    tar -xf libsndfile-$LIBSND_VERSION.tar.gz                                                                  && \
    rm libsndfile-$LIBSND_VERSION.tar.gz                                                                       && \
    cd libsndfile-$LIBSND_VERSION                                                                              && \
    ./configure && make -j"$(grep ^processor /proc/cpuinfo | wc -l)" && make install                           && \
    cd /tmp && rm -rf libsnd-$LIBSND_VERSION

#cudnn
COPY sys/cudnn/cudnn-10.2-linux-x64-v7.6.5.32.tar /
RUN CUDNN_BUILD=cudnn-10.2-linux-x64-v7.6.5.32 && \
    tar -xf ${CUDNN_BUILD}.tar && rm ${CUDNN_BUILD}.tar && \
    cp -r /cuda/lib64/libcudnn* /usr/lib/x86_64-linux-gnu/ && \
    cp -r /cuda/include/* /usr/include/ && \
    rm -r cuda

#nccl
COPY sys/nccl/nccl_2.6.4-1+cuda10.2_x86_64.txz /
RUN NCCL_BUILD=nccl_2.6.4-1+cuda10.2_x86_64 && \
    tar -xf ${NCCL_BUILD}.txz && rm ${NCCL_BUILD}.txz && \
    rm /usr/lib/x86_64-linux-gnu/libnccl* && \
    cp -r ${NCCL_BUILD}/lib/libnccl* /usr/lib/x86_64-linux-gnu/ && \
    cp -r ${NCCL_BUILD}/include/* /usr/include/ && \
    rm -r ${NCCL_BUILD}

## GDS
#ARG GDS_VERSION
#RUN apt install --assume-yes libudev-dev liburcu-dev \
#    	libmount-dev libnuma-dev libjsoncpp-dev librdmacm-dev
#COPY sys/gds-${GDS_VERSION}/lib/*.so /usr/lib/x86_64-linux-gnu/
#COPY sys/gds-${GDS_VERSION}/lib/cufile.h /usr/include/
#COPY sys/gds-${GDS_VERSION}/config/cufile.json /etc/


# set env
#ENV PATH "/usr/local/cuda/bin:${PATH}"
#ENV LD_LIBRARY_PATH "/usr/local/nccl/lib:/usr/local/cudnn/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"